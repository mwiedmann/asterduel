.ifndef CONFIG_H
CONFIG_H=1

SOUND_BANK = 2
ZSM_BANK = 1

TILE_COUNT = 64
TILES_PER_ROW = 64
TILES_PER_COL = 32
VISIBLE_TILES_PER_ROW = 40
VISIBLE_TILES_PER_COL = 30

MAPBASE_L1_ADDR = 0
MAPBASE_L1_SIZE = $1000 ; 4kB

MAPBASE_L0_ADDR = MAPBASE_L1_ADDR + MAPBASE_L1_SIZE 
MAPBASE_L0_SIZE = 8192; 128x32x2=8kB

TILEBASE_L1_ADDR = MAPBASE_L0_ADDR + MAPBASE_L0_SIZE
TILEBASE_L1_SIZE = 256 * TILE_COUNT ; 12kb

TILEBASE_L0_ADDR = TILEBASE_L1_ADDR + TILEBASE_L1_SIZE
TILEBASE_L0_SIZE = 256*48 ; 48 tiles

VERA_LAYERS_OFF_DC_VIDEO_BITS = %10000001
VERA_DC_VIDEO_BITS = %11110001; Sprites on, Both Layers on, other defaults
VERA_L1_CONFIG_BITS = %00010011; 64x32 tiles, 1bbp
VERA_L1_MAPBASE_BITS = (MAPBASE_L1_ADDR>>9) ; Mapbase at VRAM Addr 0, need 4kB
VERA_L1_TILEBASE_BITS = (TILEBASE_L1_ADDR>>9) + %00000011 ; Start at 4Kb VRAM, 16x16 pixel tiles

VERA_L0_CONFIG_BITS = %001101011; 256x32 tiles, 8bbp
VERA_L0_MAPBASE_BITS = (MAPBASE_L0_ADDR>>9)
VERA_L0_TILEBASE_BITS = (TILEBASE_L0_ADDR>>9) + %00000011

SHIP_1_LOAD_ADDR = TILEBASE_L0_ADDR+TILEBASE_L0_SIZE
DEFAULT_FRAME_SIZE = 1024
SHIP_FRAME_COUNT = 5

SHIP_SPRITE_FRAME_SIZE = 1024

SHIP_1_THRUST_LOAD_ADDR = SHIP_1_LOAD_ADDR + (SHIP_SPRITE_FRAME_SIZE*SHIP_FRAME_COUNT)

SHIP_1_LASER_LOAD_ADDR = SHIP_1_THRUST_LOAD_ADDR + (SHIP_SPRITE_FRAME_SIZE*SHIP_FRAME_COUNT)
SHIP_1_LASER_SPRITE_FRAME_SIZE = 256
SHIP_1_LASER_FRAME_COUNT = 5

ASTBIG_LOAD_ADDR = SHIP_1_LASER_LOAD_ADDR + (SHIP_1_LASER_SPRITE_FRAME_SIZE*SHIP_1_LASER_FRAME_COUNT)
ASTBIG_SPRITE_FRAME_SIZE = 1024
ASTBIG_FRAME_COUNT = 16

; VRAM 2nd bank
ASTSML_LOAD_ADDR =  ASTBIG_LOAD_ADDR + (ASTBIG_SPRITE_FRAME_SIZE * ASTBIG_FRAME_COUNT)
ASTSML_SPRITE_FRAME_SIZE = 256
ASTSML_FRAME_COUNT = 16

EXPLOSION_LOAD_ADDR = ASTSML_LOAD_ADDR + (ASTSML_SPRITE_FRAME_SIZE * ASTSML_FRAME_COUNT)
EXPLOSION_SPRITE_FRAME_SIZE = 1024
EXPLOSION_FRAME_COUNT = 8

GEM_LOAD_ADDR = EXPLOSION_LOAD_ADDR + (EXPLOSION_SPRITE_FRAME_SIZE * EXPLOSION_FRAME_COUNT)
GEM_SPRITE_FRAME_SIZE = 256
GEM_FRAME_COUNT = 4

SHIP_2_LOAD_ADDR = GEM_LOAD_ADDR + (GEM_SPRITE_FRAME_SIZE * GEM_FRAME_COUNT)

SHIP_2_THRUST_LOAD_ADDR = SHIP_2_LOAD_ADDR + (SHIP_SPRITE_FRAME_SIZE*SHIP_FRAME_COUNT)

SHIP_2_LASER_LOAD_ADDR = SHIP_2_THRUST_LOAD_ADDR + (SHIP_SPRITE_FRAME_SIZE*SHIP_FRAME_COUNT)
SHIP_2_LASER_SPRITE_FRAME_SIZE = 256
SHIP_2_LASER_FRAME_COUNT = 5

SHIP_ROTATE_TICKS = 4
SHIP_THRUST_TICKS = 6
ENTITY_ACCEL_TICKS = 3
SHIP_FIRE_TICKS = 40
SHIP_MAX_ACCEL = 64

SHIP_1_SPRITE_NUM = 0
SHIP_1_ENTITY_NUM = 0

SHIP_2_SPRITE_NUM = SHIP_1_SPRITE_NUM + 2
SHIP_2_ENTITY_NUM = SHIP_1_ENTITY_NUM + 1

SHIP_1_LASER_SPRITE_NUM_START = SHIP_2_SPRITE_NUM + 2
SHIP_1_LASER_ENTITY_NUM_START = SHIP_2_ENTITY_NUM + 1
SHIP_1_LASER_COUNT = 2

SHIP_2_LASER_SPRITE_NUM_START = SHIP_1_LASER_SPRITE_NUM_START + (SHIP_1_LASER_COUNT * 2)
SHIP_2_LASER_ENTITY_NUM_START = SHIP_1_LASER_ENTITY_NUM_START + SHIP_1_LASER_COUNT
SHIP_2_LASER_COUNT = 2

ASTBIG_SPRITE_NUM_START = SHIP_2_LASER_SPRITE_NUM_START + (SHIP_2_LASER_COUNT * 2)
ASTBIG_ENTITY_NUM_START = SHIP_2_LASER_ENTITY_NUM_START + SHIP_2_LASER_COUNT
ASTBIG_COUNT = 6

ASTSML_SPRITE_NUM_START = ASTBIG_SPRITE_NUM_START + (ASTBIG_COUNT * 2)
ASTSML_ENTITY_NUM_START = ASTBIG_ENTITY_NUM_START + ASTBIG_COUNT
ASTSML_COUNT = 10

GEM_SPRITE_NUM_START = ASTSML_SPRITE_NUM_START + (ASTSML_COUNT * 2)
GEM_ENTITY_NUM_START = ASTSML_ENTITY_NUM_START + ASTSML_COUNT
GEM_COUNT = 6

OUTER_ENTITY_COUNT = 1 + 1 + SHIP_1_LASER_COUNT + SHIP_2_LASER_COUNT
ENTITY_COUNT = OUTER_ENTITY_COUNT + ASTBIG_COUNT + ASTSML_COUNT + GEM_COUNT

ONESHOT_SPRITE_NUM_START = GEM_SPRITE_NUM_START + (GEM_COUNT * 2)
ONESHOT_SPRITE_COUNT = 8
ONESHOT_TICKS = 4

MISSILE_SOUND = HIRAM
MISSILE_SOUND_SIZE=512

EXPLODE_SOUND=MISSILE_SOUND+MISSILE_SOUND_SIZE
EXPLODE_SOUND_SIZE=512

THRUST_SOUND=EXPLODE_SOUND+EXPLODE_SOUND_SIZE
THRUST_SOUND_SIZE=512

CRYSTAL_SOUND=THRUST_SOUND+THRUST_SOUND_SIZE
CRYSTAL_SOUND_SIZE=2048

MINE_SOUND=CRYSTAL_SOUND+CRYSTAL_SOUND_SIZE
MINE_SOUND_SIZE=2048

CUT_SOUND=MINE_SOUND+MINE_SOUND_SIZE
;CUT_SOUND_SIZE=17kB

DEAD_SHIP_TIME = 180 ; 3 seconds
LASER_DESTROY_TICKS = 60

HITBOX_SHRINK = 2

STARTING_LEVEL = 0

SHIP_MID = 320-16
SHIP_MAX = (2048-320)-16
SHIP_MAX_SCROLL = 2048-640

SHIP_1_X_START = 128
SHIP_2_X_START = (2048-160)

SHIP_RESPAWN_COUNT = 180

AST_LAUNCH_X_START = (1024-160)-16
AST_LAUNCH_X_ADJ = 64

LANE_PIXEL_ADJUST = 240

SCROLL_BOTTOM_ADJUST=-240

LANE_BOTTOM_Y=224<<5
LANE_BOTTOM_Y_BIG=400<<5
LANE_X_BIG=(2048-32)<<5

BOUNDARY_LEFT_TILE_X = 40
BOUNDARY_RIGHT_TILE_X = 87

BOUNDARY_LEFT_X = ((BOUNDARY_LEFT_TILE_X * 16) + 16) ; Check if < right edge of this tile
BOUNDARY_RIGHT_X = (BOUNDARY_RIGHT_TILE_X * 16) ; Check if > left edge of this tile
BOUNDARY_LEFT_COLLISION_MATRIX = %01011000
BOUNDARY_RIGHT_COLLISION_MATRIX = %10101000

.endif